version: 2.1
executors:
  python:
    docker:
      - image: cimg/python:3.12.1
jobs:
  check_style:
    docker:
      - image: cimg/node:18.12.1
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Check code style
          command: ./dev-scripts/check-style
  build:
    executor: python
    steps:
      - checkout
      - run:
          name: Install requirements and run build script
          command: |
            mkdir -p ./venv
            virtualenv --python python3 ./venv
            . venv/bin/activate
            pip install --requirement dev_requirements.txt
            ./dev-scripts/build
      - persist_to_workspace:
          root: ./
          paths:
            - .coverage
  coverage:
    executor: python
    steps:
      - checkout
      - attach_workspace:
          at: ./
      - run:
          name: install coveralls and upload coverage information
          command: |
            mkdir -p ./venv
            virtualenv --python python3 ./venv
            . venv/bin/activate
            pip install coveralls==3.0.1
      - run:
          name: upload coverage information
          command: . venv/bin/activate && coveralls
  e2e:
    executor: python
    steps:
      - checkout
      - run:
          name: Install bzip2
          command: sudo apt-get install bzip2
      - run:
          name: Install restic
          command: ./dev-scripts/install-restic
      - run:
          name: Install from setup.py and run end-to-end tests
          command: |
            mkdir -p ./venv
            virtualenv --python python3 ./venv
            . venv/bin/activate
            pip install .
            ./e2e/test.py
  prepare_pypi_package:
    executor: python
    steps:
      - checkout
      - run:
          name: Install requirements and run build script
          command: |
            set -x
            mkdir -p ./venv
            virtualenv --python python3 ./venv
            . venv/bin/activate
            pip install \
              setuptools==69.0.3 \
              wheel==0.42.0 \
              twine==5.1.1

            # Extract version from git tag
            if [[ -n "${CIRCLE_TAG}" ]]; then
              PACKAGE_VERSION="${CIRCLE_TAG}"
              export PACKAGE_VERSION
              echo "Building version: $PACKAGE_VERSION from tag: $CIRCLE_TAG"
            fi

            python setup.py sdist bdist_wheel
            twine check dist/*
      - persist_to_workspace:
          root: .
          paths:
            - venv
            - dist
  publish:
    executor: python
    steps:
      - attach_workspace:
          at: .
      - run:
          name: publish to PyPI
          # Requires TWINE_USERNAME and TWINE_PASSWORD environment variables.
          command: |
            set -x
            . venv/bin/activate
            twine upload dist/*
workflows:
  test:
    jobs:
      - check_style:
          filters:
            tags:
              only: /.*/
      - build:
          filters:
            tags:
              only: /.*/
      - coverage:
          requires:
            - build
          filters:
            branches:
              # Skip forked pull requests because they don't have access to the
              # Coveralls auth token environment variable. Forked pull requests
              # have CIRCLE_BRANCH set to "pull/XXX".
              ignore: /pull\/[0-9]+/
      - e2e:
          filters:
            tags:
              only: /.*/
      - prepare_pypi_package:
          filters:
            tags:
              only: /.*/
      - publish:
          requires:
            - check_style
            - build
            - e2e
            - prepare_pypi_package
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+){2}/
            branches:
              ignore: /.*/
